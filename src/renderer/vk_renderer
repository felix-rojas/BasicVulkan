/**
 * @file vk_renderer
 * original author is Cakez77 https://youtu.be/L5iW-jMhmyg?t=1312
 * @brief file to initialize vulkan depending on the OS
 * @version 0.1
 * @date 2023-06-15
 * @todo change arrays to std::vector,
 * @bug Validation error: Validation Error: [ VUID-VkPresentInfoKHR-pImageIndices-01296 ] Object 0: handle = 0x1b1eb589590, type = VK_OBJECT_TYPE_QUEUE; | MessageID = 0xc7aabc16 | vkQueuePresentKHR(): pSwapchains[0] images passed to present must be in layout VK_IMAGE_LAYOUT_PRESENT_SRC_KHR or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR but is in VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL. The Vulkan spec states: Each element of pImageIndices must be the index of a presentable image acquired from the swapchain specified by the corresponding element of the pSwapchains array, and the presented image subresource must be in the VK_IMAGE_LAYOUT_PRESENT_SRC_KHR layout at the time the operation is executed on a VkDevice (https://github.com/KhronosGroup/Vulkan-Docs/search?q=)VUID-VkPresentInfoKHR-pImageIndices-01296)
 *
 */

#include <vulkan/vulkan.h>
#ifdef WINDOWS_BUILD
#include <vulkan/vulkan_win32.h>
#elif LINUX_BUILD
#endif
#include <iostream>
#include "vk_init.cpp"
#include "platform.h"

#define ArraySize(arr) sizeof((arr)) / sizeof((arr[0]))

/**
 * @brief Error handling for development
 *
 */
#define VK_CHECK(result)                                           \
    if (result != VK_SUCCESS)                                      \
    {                                                              \
        std::cout << "Vulcan Error code: " << result << std::endl; \
        __debugbreak();                                            \
        return false;                                              \
    }

static VKAPI_ATTR VkBool32 VKAPI_CALL vk_debug_callback(
    VkDebugUtilsMessageTypeFlagBitsEXT msgSeverity,
    VkDebugUtilsMessageTypeFlagsEXT msgFlags,
    const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData,
    void *pUserData)
{
    std::cout << "Validation error: " << pCallbackData->pMessage << std::endl;
    return false;
}

struct VkContext
{
    VkExtent2D screenSize;

    VkInstance instance;
    VkSurfaceKHR surface;
    VkSurfaceFormatKHR surface_format;
    VkPhysicalDevice gpu;
    VkDevice device;
    VkSwapchainKHR swapchain;
    VkDebugUtilsMessengerEXT debugMessenger;
    VkQueue graphicsQueue;
    VkCommandPool commandPool;
    VkRenderPass renderPass;

    uint32_t swapchainImgCount;
    VkImage swapchainImages[5];

    VkImageView swapchainImageViews[5];
    VkFramebuffer frameBuffers[5];

    VkSemaphore submitSemaphore;
    VkSemaphore acquireSemaphore;

    VkPipeline pipeline;

    int graphicsIndex;
};

/**
 * @brief initializes the instance and surface required for vulkan instance
 *
 * @param vkcontext defined
 * @param window is a void pointer for other OS builds
 * @return true if instance was succesfully initialized
 */
bool vk_init(VkContext *vkcontext, void *window)
{
    platform_get_window_size(&vkcontext->screenSize.width, &vkcontext->screenSize.height);

    VkApplicationInfo appInfo = {};
    appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
    appInfo.pApplicationName = "Vulkan_app";
    appInfo.pEngineName = "VulkanEngine";

    // array of the necessary extensions for each OS
    char *surface_extensions[] = {
#ifdef WINDOWS_BUILD
        VK_KHR_WIN32_SURFACE_EXTENSION_NAME,
#elif LINUX_BUILD
#endif
        VK_EXT_DEBUG_UTILS_EXTENSION_NAME,
        VK_KHR_SURFACE_EXTENSION_NAME};

    char *validationLayers[] = {
        "VK_LAYER_KHRONOS_validation"};

    VkInstanceCreateInfo instanceInfo = {};
    instanceInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
    instanceInfo.pApplicationInfo = &appInfo;
    instanceInfo.ppEnabledExtensionNames = surface_extensions;
    instanceInfo.enabledExtensionCount = ArraySize(surface_extensions);
    instanceInfo.ppEnabledLayerNames = validationLayers;
    instanceInfo.enabledLayerCount = ArraySize(validationLayers);
    VK_CHECK(vkCreateInstance(&instanceInfo, 0, &vkcontext->instance));

    auto vkCreateDebugUtilsMessengerEXT = (PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(vkcontext->instance, "vkCreateDebugUtilsMessengerEXT");

    if (vkCreateDebugUtilsMessengerEXT)
    {
        VkDebugUtilsMessengerCreateInfoEXT debugInfo = {};
        debugInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
        debugInfo.messageSeverity = VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT;
        debugInfo.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT;
        debugInfo.pfnUserCallback = (PFN_vkDebugUtilsMessengerCallbackEXT)vk_debug_callback;

        vkCreateDebugUtilsMessengerEXT(vkcontext->instance, &debugInfo, 0, &vkcontext->debugMessenger);
    }
    else
    {
        return false;
    }

    /**
     * @brief Localized scope for surface creation
     */
    {
#ifdef WINDOWS_BUILD
        VkWin32SurfaceCreateInfoKHR surfaceInfo = {};
        surfaceInfo.sType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;
        surfaceInfo.hwnd = (HWND)window;
        surfaceInfo.hinstance = GetModuleHandleA(0);
        VK_CHECK(vkCreateWin32SurfaceKHR(vkcontext->instance, &surfaceInfo, 0, &vkcontext->surface));
#elif LINUX_BUILD
#endif
    }

    // Localized scope for choosing GPU
    {
        vkcontext->graphicsIndex = -1;
        uint32_t gpuCount = 0;
        // TODO: Suballocation from main allocation
        VkPhysicalDevice gpus[10];

        VK_CHECK(vkEnumeratePhysicalDevices(vkcontext->instance, &gpuCount, 0));
        VK_CHECK(vkEnumeratePhysicalDevices(vkcontext->instance, &gpuCount, gpus));

        for (uint32_t i = 0; i < gpuCount; i++)
        {
            VkPhysicalDevice gpu = gpus[i];

            // check for queue families
            uint32_t queueFamilyCount = 0;
            // TODO: Suballocation from main allocation
            VkQueueFamilyProperties queueProperties[10];
            vkGetPhysicalDeviceQueueFamilyProperties(gpu, &queueFamilyCount, 0);
            vkGetPhysicalDeviceQueueFamilyProperties(gpu, &queueFamilyCount, queueProperties);
            for (uint32_t j = 0; j < queueFamilyCount; j++)
            {
                // is it capable of using graphics?
                if (queueProperties[j].queueFlags && VK_QUEUE_GRAPHICS_BIT)
                {
                    // can it present images to our surface?
                    VkBool32 surfaceSupport = VK_FALSE;
                    VK_CHECK(vkGetPhysicalDeviceSurfaceSupportKHR(gpu, j, vkcontext->surface, &surfaceSupport));

                    if (surfaceSupport)
                    {
                        vkcontext->graphicsIndex = j;
                        vkcontext->gpu = gpu;
                        break;
                    }
                }
            }
        }

        if (vkcontext->graphicsIndex < 0) // if there are no graphic processing capabilites, stop
        {
            return false;
        }
    }

    // Localized scope to set a logical device

    {
        float queuePriority = 1.0f;

        VkDeviceQueueCreateInfo queueInfo = {};
        queueInfo.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
        queueInfo.queueFamilyIndex = vkcontext->graphicsIndex;
        queueInfo.queueCount = 1;
        queueInfo.pQueuePriorities = &queuePriority;

        char *swapchain_extensions[] = {
            VK_KHR_SWAPCHAIN_EXTENSION_NAME};

        VkDeviceCreateInfo deviceInfo = {};
        deviceInfo.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
        deviceInfo.pQueueCreateInfos = &queueInfo;
        deviceInfo.queueCreateInfoCount = 1;
        deviceInfo.enabledExtensionCount = ArraySize(swapchain_extensions);
        deviceInfo.ppEnabledExtensionNames = swapchain_extensions;

        VK_CHECK(vkCreateDevice(vkcontext->gpu, &deviceInfo, 0, &vkcontext->device));
        vkGetDeviceQueue(vkcontext->device, vkcontext->graphicsIndex, 0, &vkcontext->graphicsQueue);
    }
    // define the swapchain to manage the images
    {
        uint32_t format_count = 0;
        // minimum and maximum image count
        VkSurfaceCapabilitiesKHR surface_capabilities = {};
        VK_CHECK(vkGetPhysicalDeviceSurfaceCapabilitiesKHR(vkcontext->gpu, vkcontext->surface, &surface_capabilities));
        uint32_t imgCount = surface_capabilities.minImageCount + 1;
        imgCount = imgCount > surface_capabilities.maxImageCount - 1 ? imgCount - 1 : imgCount;

        // get the supported image formats
        // TODO suballocation from main memory
        VkSurfaceFormatKHR surface_formats[10];
        vkGetPhysicalDeviceSurfaceFormatsKHR(vkcontext->gpu, vkcontext->surface, &format_count, 0);
        vkGetPhysicalDeviceSurfaceFormatsKHR(vkcontext->gpu, vkcontext->surface, &format_count, surface_formats);

        for (uint32_t i = 0; i < format_count; i++)
        {
            VkSurfaceFormatKHR format = surface_formats[i];
            // most common format, it stores
            // 8-bit colors blue, red, green and alpha
            if (format.format == VK_FORMAT_B8G8R8A8_SRGB)
            {
                vkcontext->surface_format = format;
                break;
            }
        }

        // Swapchain is defined with surface and pretransforms to show the image
        VkSwapchainCreateInfoKHR swapchainInfo = {};
        swapchainInfo.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
        swapchainInfo.imageUsage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
        // ignore alpha channel
        swapchainInfo.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
        swapchainInfo.surface = vkcontext->surface;
        swapchainInfo.preTransform = surface_capabilities.currentTransform;
        swapchainInfo.imageExtent = surface_capabilities.currentExtent;
        swapchainInfo.minImageCount = imgCount;
        swapchainInfo.imageArrayLayers = 1;
        swapchainInfo.imageFormat = vkcontext->surface_format.format;

        VK_CHECK(vkCreateSwapchainKHR(vkcontext->device, &swapchainInfo, 0, &vkcontext->swapchain));

        // Swapchain images are given but it needs a display to show them
        VK_CHECK(vkGetSwapchainImagesKHR(vkcontext->device, vkcontext->swapchain, &vkcontext->swapchainImgCount, 0));
        VK_CHECK(vkGetSwapchainImagesKHR(vkcontext->device, vkcontext->swapchain, &vkcontext->swapchainImgCount, vkcontext->swapchainImages));

        // create image views
        VkImageViewCreateInfo viewInfo = {};
        viewInfo.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
        viewInfo.format = vkcontext->surface_format.format;
        // we are only passing a 2d array flat image
        viewInfo.viewType = VK_IMAGE_VIEW_TYPE_2D;
        viewInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
        viewInfo.subresourceRange.layerCount = 1;
        viewInfo.subresourceRange.levelCount = 1;

        for (uint32_t i = 0; i < vkcontext->swapchainImgCount; i++)
        {
            viewInfo.image = vkcontext->swapchainImages[i];
            VK_CHECK(vkCreateImageView(vkcontext->device, &viewInfo, 0, &vkcontext->swapchainImageViews[i]));
        }
    }

    // render pass
    {
        VkAttachmentDescription attachment = {};
        // clear the image to this color in the rendering loop
        attachment.loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;
        // we dont know the initial layout
        attachment.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
        attachment.finalLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
        // store the result
        attachment.storeOp = VK_ATTACHMENT_STORE_OP_STORE;
        // sampling with 1 bit, take the image as is
        attachment.samples = VK_SAMPLE_COUNT_1_BIT;
        attachment.format = vkcontext->surface_format.format;

        // at least 1 subpass is necessary
        VkAttachmentReference colorAttachmentReference = {};
        colorAttachmentReference.attachment = 0;
        colorAttachmentReference.layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;

        VkAttachmentDescription attachments[] = {
            attachment};

        VkSubpassDescription subpassDescription = {};
        subpassDescription.colorAttachmentCount = 1;
        subpassDescription.pColorAttachments = &colorAttachmentReference;

        VkRenderPassCreateInfo renderPassCreateInfo = {};
        renderPassCreateInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
        renderPassCreateInfo.pAttachments = attachments;
        renderPassCreateInfo.attachmentCount = ArraySize(attachments);

        renderPassCreateInfo.subpassCount = 1;
        renderPassCreateInfo.pSubpasses = &subpassDescription;

        VK_CHECK(vkCreateRenderPass(vkcontext->device, &renderPassCreateInfo, 0, &vkcontext->renderPass));
    }

    // frame buffers
    {
        VkFramebufferCreateInfo frameBufferInfo = {};
        // buffer the frames in the entire screen
        frameBufferInfo.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
        frameBufferInfo.height = vkcontext->screenSize.height;
        frameBufferInfo.width = vkcontext->screenSize.width;
        // image views of the image swap
        frameBufferInfo.renderPass = vkcontext->renderPass;
        frameBufferInfo.layers = 1;
        frameBufferInfo.attachmentCount = 1;

        for (uint32_t i = 0; i < vkcontext->swapchainImgCount; i++)
        {
            frameBufferInfo.pAttachments = &vkcontext->swapchainImageViews[i];
            VK_CHECK(vkCreateFramebuffer(vkcontext->device, &frameBufferInfo, 0, &vkcontext->frameBuffers[i]));
        }
    }

    // pipeline
    // this is one of the most expensive calls, so be careful 
    {
        VkPipelineColorBlendAttachmentState attachmentColor={};
        // which color channels to write to the image 
        attachmentColor.colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
        // no color blending
        attachmentColor.blendEnable = VK_FALSE;


        VkPipelineColorBlendStateCreateInfo colorBlendState = {};
        colorBlendState.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
        colorBlendState.pAttachments = &attachmentColor; 
        colorBlendState.attachmentCount = 1;
        
        // this won e used for now, but later
        VkPipelineVertexInputStateCreateInfo vertexInputState;
        vertexInputState.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;


        VkGraphicsPipelineCreateInfo graphicsPipelineInfo = {};
        graphicsPipelineInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
        graphicsPipelineInfo.pVertexInputState = &vertexInputState;
        graphicsPipelineInfo.pColorBlendState = &colorBlendState;
        vkCreateGraphicsPipelines(vkcontext->device, 0, 1, &graphicsPipelineInfo, 0, &vkcontext->pipeline);
    }

    // create command pool
    {
        VkCommandPoolCreateInfo poolInfo = {};
        poolInfo.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
        poolInfo.queueFamilyIndex = vkcontext->graphicsIndex;
        VK_CHECK(vkCreateCommandPool(vkcontext->device, &poolInfo, 0, &vkcontext->commandPool));
    }

    // sync objects
    {
        VkSemaphoreCreateInfo semaphoreInfo = {};
        semaphoreInfo.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;

        VK_CHECK(vkCreateSemaphore(vkcontext->device, &semaphoreInfo, 0, &vkcontext->submitSemaphore));
        VK_CHECK(vkCreateSemaphore(vkcontext->device, &semaphoreInfo, 0, &vkcontext->acquireSemaphore));
    }
    return true;
}

/**
 * Rendering instructions require semaphores because the code can be executed at any given time.
 * To ensure some commands run before others we require semaphores to synchronize commands
 * The cpu will wait until the gpu is ready
 *
 * @param vkcontext
 * @return true
 * @return false
 */
bool vk_render(VkContext *vkcontext)
{
    uint32_t ImageIndex;
    VK_CHECK(vkAcquireNextImageKHR(vkcontext->device, vkcontext->swapchain, 0, vkcontext->acquireSemaphore, 0, &ImageIndex));

    // Buffer of instructions to send
    VkCommandBuffer commandBuffer;
    VkCommandBufferAllocateInfo allocInfo = {};
    allocInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
    allocInfo.commandBufferCount = 1;
    allocInfo.commandPool = vkcontext->commandPool;
    VK_CHECK(vkAllocateCommandBuffers(vkcontext->device, &allocInfo, &commandBuffer));

    VkCommandBufferBeginInfo beginInfo = cmd_begin_info();
    VK_CHECK(vkBeginCommandBuffer(commandBuffer, &beginInfo));

    VkClearValue clearValue = {};
    clearValue.color = {1, 0, 1, 1};

    // subpass commands will be recorded, on each draw call will be used executed
    VkRenderPassBeginInfo renderPassBeginInfo = {};
    renderPassBeginInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
    renderPassBeginInfo.renderPass = vkcontext->renderPass;
    renderPassBeginInfo.renderArea.extent = vkcontext->screenSize;
    renderPassBeginInfo.pClearValues = &clearValue;
    renderPassBeginInfo.framebuffer = vkcontext->frameBuffers[ImageIndex];
    renderPassBeginInfo.clearValueCount = 1;
    renderPassBeginInfo.pClearValues = &clearValue;

    vkCmdBeginRenderPass(commandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);

    // Rendering commands
    {
    }

    vkCmdEndRenderPass(commandBuffer);

    // what are we sending to the pipeline to render, it can be shaders, etc...
    VkPipelineStageFlags waitStage = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;

    VK_CHECK(vkEndCommandBuffer(commandBuffer));

    VkSubmitInfo submitInfo = {};
    submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
    submitInfo.pWaitDstStageMask = &waitStage;
    submitInfo.commandBufferCount = 1;
    submitInfo.pCommandBuffers = &commandBuffer;
    submitInfo.signalSemaphoreCount = 1;
    submitInfo.pSignalSemaphores = &vkcontext->submitSemaphore;
    submitInfo.pWaitSemaphores = &vkcontext->acquireSemaphore;
    submitInfo.waitSemaphoreCount = 1;
    VK_CHECK(vkQueueSubmit(vkcontext->graphicsQueue, 1, &submitInfo, 0));

    VkPresentInfoKHR presentInfo = {};
    presentInfo.sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
    presentInfo.pSwapchains = &vkcontext->swapchain;
    presentInfo.swapchainCount = 1;
    presentInfo.pImageIndices = &ImageIndex;
    presentInfo.pWaitSemaphores = &vkcontext->submitSemaphore;
    presentInfo.waitSemaphoreCount = 1;
    VK_CHECK(vkQueuePresentKHR(vkcontext->graphicsQueue, &presentInfo));

    // end the buffer to avoid memory leaks
    // command buffer can only be freed when not in use
    VK_CHECK(vkDeviceWaitIdle(vkcontext->device));
    vkFreeCommandBuffers(vkcontext->device, vkcontext->commandPool, 1, &commandBuffer);
    return true;
}